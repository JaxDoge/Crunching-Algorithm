116. 填充每个节点的下一个右侧节点指针

"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

# # 层序遍历解法
# class Solution:
# 	  def connect(self, root: 'Node') -> 'Node':
# 	  	node = root
# 	  	if not node:
# 	  		return root

# 	  	helper = collections.deque([node])

# 	  	while helper:
#         # Get the loop number for each inner loop 
# 	  		q_size = len(helper)

# 	  		for i in range(q_size):
# 	  			ele = helper.popleft()
# 	  			if i < q_size - 1:      # If the node belongs to the current level
# 	  				ele.next = helper[0]
# 	  			if ele.left:
# 	  				helper.append(ele.left)
# 	  			if ele.right:
# 	  				helper.append(ele.right)

# 	  	return root


# space complexity O(1) 解法：

# class Solution:
# 	def connect(self, root: 'Node') -> 'Node':
# 	  	if not root:
# 	  		return root

# 	  	leftmost = root

# 	  	while leftmost.left:
# 	  		node = leftmost
# 	  		while node:
# 		  		if not node.left.next:
# 		  			node.left.next = node.right

# 		  		if node.left.next and node.next:
# 		  			node.right.next = node.next.left
# 		  		node = node.next

# 	  		leftmost = leftmost.left

# 	  	return root



