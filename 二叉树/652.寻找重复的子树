652.寻找重复的⼦树

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


# # 时间空间复杂度最高，均为 O(n^2)，因为序列化一个数就要 O(n)
# class Solution:
#     def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:
#     	# hash_map for counting the subtrees
#     	hash_map = dict()
#     	# result list
#     	res = []

#     	def ListAllSubtree(root):
#     		node = root
#     		if root == None:
#     			return 'Empty'  # The flag of empty node, so one traversal could rep one single tree

#     		left_subtree = ListAllSubtree(node.left)
#     		right_subtree = ListAllSubtree(node.right)

#     		this_tree = left_subtree + ',' + right_subtree + ',' + str(node.val)
#     		freqency = hash_map[this_tree] if this_tree in hash_map else 0
#     		if freqency == 1:
#     			res.append(node)
#     		if freqency == 0:
#     			hash_map[this_tree] = 1
#     		if freqency > 0:
#     			hash_map[this_tree] += 1
#     		return this_tree
#     	ListAllSubtree(root)
#     	return res



# Defaultdict Gimmick Method

class Solution:
    def findDuplicateSubtrees(self, root: TreeNode) -> List[TreeNode]:
        import collections

        # 这套语法建立的 defaultdict 实现了简单的从 0 开始给不同的 key 编码
        subtrees = collections.defaultdict()
        subtrees.default_factory = subtrees.__len__  # RS 必须是 callable 的函数签名或者类名
        # 记录子树出现的次数
        counter = collections.Counter()
        res = []

        def builder(node):
            if node:
                # 给每个子数编码不同的 uid，由于 builder 本身返回的是唯一索引 uid，node.val, builder(node.left), builder(node.right) 完整代表了一个子树结构
                uid = subtrees[node.val, builder(node.left), builder(node.right)]
                count[uid] += 1
                # 第一次重复则打印根节点
                if count[uid] == 2:
                    res.append(node)
                return uid
        builder(root)
        return res


