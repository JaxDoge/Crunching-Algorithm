538. Convert BST to Greater Tree

# class TreeNode:
# 	def __init__(self, val = 0, left = None, right = None):
# 		self.val = val
# 		self.left = left
# 		self.right = right


# 递归解法
# 反向中序遍历可以得到降序结果
class Solution:
	def convertBST(self, root: TreeNode) -> TreeNode:
		node = root  # preserve the root reference
        sumup = 0
		def reverseinorder(node):
			nonlocal sumup
			if not node: return

            reverseinorder(node.right)
            sumup += node.val
            node.val = sumup
            reverseinorder(node.left)
        reverseinorder(node)
        return root


# Morris 解法

class Solution:
	def convertBST(self, root: TreeNode) -> TreeNode:
		if not root: return root

		node = root # preserve the root reference
		sumup = 0

		while node:
			if not node.right:
				sumup += node.val
				node.val = sumup
                node = node.left
			else:
				pre = node.right
				while pre.left and pre.left != node:
					pre = pre.left

				if not pre.left:
					pre.left = node 
					node = node.right
				else: # 右子树node指针遍历完了
					sumup += node.val
					node.val = sumup
					node = node.left
					pre.left = None   # 这里要断开链接，因为返回的是个 TreeNode，否则会在数结构中无限循环
		return root



