106. 从中序与后序遍历序列构造二叉树

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


class Solution:
    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:
    	inorder_hash_table = {value: i for i, value in enumerate(inorder)}
    	
    	def build(postorder: List[int], post_start: int, post_end: int
    		, inorder: List[int], in_start: int, in_end: int):
    	    
    	    if post_end<post_start:
    	    	return None
    	    
    	    root = TreeNode(val = postorder[post_end])
    	    inorder_root_index = inorder_hash_table[postorder[post_end]]

    	    left_tree_size = inorder_root_index - in_start
    	    root.left = build(postorder, post_start, post_start+left_tree_size-1
    	    	, inorder, in_start, inorder_root_index-1)
    	    root.right = build(postorder, post_start+left_tree_size, post_end-1
    	    	, inorder, inorder_root_index+1, in_end)
    	    return root
    	return build(postorder,0,len(postorder)-1,inorder,0,len(inorder)-1)



    	