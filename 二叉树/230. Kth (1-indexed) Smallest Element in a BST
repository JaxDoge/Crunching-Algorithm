230. Kth (1-indexed) Smallest Element in a BST

# class TreeNode:
# 	def __init__(self, val=0, left=None, right=None):
# 		self.val = val
# 		self.left = left
# 		self.right = right

# BST 最基本的性质: 中序遍历为升序;通过对比根节点的值，知道目标节点在左子树还是在右子树

class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        res = 0
        # record the rank of current node
        rank = 0
        node = root
        def traverser(node: TreeNode, k: int):
            nonlocal rank, res    # Don't you ever fucking forget it!!!! It isn't list!!
            if not node:
                return
            traverser(node.left,k)
            rank += 1
            if rank == k:
                res = node.val
                return
            traverser(node.right,k)
        traverser(node,k)
        return res



# 有了size字段，外加 BST 节点左小右大的性质，对于每个节点node就可以通过node.left推导出node的排名，从而做到我们刚才说到的对数级算法。



# 迭代解法，迭代在 bst 中的主要价值是可以利用
# 中序遍历，紫金解法
class Solution:
	def kthSmallest(self, root: TreeNode, k: int) -> int:
		# Exploit list as a stack
		stack = [root]

		#
		while stack:
			i = stack.pop()
			if isinstance(i, TreeNode):
				stack.extend([i.right,i.val,i.left])
			elif isinstance(i,int):
				k -= 1 # when k == 0, we get the node
				if k == 0:
					return i
			else:
				pass


