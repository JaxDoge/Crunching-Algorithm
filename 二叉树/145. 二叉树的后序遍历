145. 二叉树的后序遍历


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


# # 递归解法
# class Solution:
#     def postorderTraversal(self, root: TreeNode) -> List[int]:
#     	res = []

#     	def innertraveler(root: TreeNode):
#     		nonlocal res    # 没有这个申明，= 赋值会出现 referenced before assignment 报错
#     		if not root:
#     			return

#     		innertraveler(root.left)
#     		innertraveler(root.right)
#     		res += [root.val]

#     		# res.append(root.val)


#     	innertraveler(root)
#     	return res	


# # 紫金解法
# class Solution:
#     def postorderTraversal(self, root: TreeNode) -> List[int]:
#     	stack, res = [root], []

#     	while stack:
#     		i = stack.pop()
#     		if isinstance(i, TreeNode):
#     			stack.extend([i.val,i.right,i.left])
#     		elif isinstance(i, int):
#     			res.append(i)
#     	return res



# Morris 解法
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        head = root
        result = []
        predecessor = None 

        if not root:
            return []

        while root:
            if not root.left:
                root = root.right
            else:
                predecessor = root.left
                while predecessor.right and predecessor.right != root:
                    predecessor = predecessor.right

                if not predecessor.right:
                    predecessor.right = root
                    root = root.left
                else:

                    predecessor.right = None 
                    result.extend(self.printval_resetlist(root.left))
                    root = root.right
        result.extend(self.printval_resetlist(head))
        return result


    def reverselistMorris(self, head: TreeNode) -> TreeNode():
    	cur = head
    	pre = None
    	while cur: # Reverse part of the tree in place
    		next_node = cur.right
    		cur.right = pre 
    		pre = cur
    		cur = next_node

    	return pre 

    def printval_resetlist(self, head: TreeNode):
    	res = []
    	print_h = self.reverselistMorris(head)  # print from the tail
    	reset_h = print_h   # record the tail for reset the list

    	while print_h:
    		res.append(print_h.val)
    		print_h = print_h.right

    	self.reverselistMorris(reset_h)  # reset right hand list
    	return res


    	



